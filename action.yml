name: 'PatchLens Go Module Update Analysis'
description: 'Submit request to PatchLens service to analyze a public GitHub repo and validate the dependency update'
author: 'PatchLens'
branding:
  icon: 'package'
  color: 'blue'

permissions:
  contents: write
  issues: write
  pull-requests: write

inputs:
  directory:
    description: 'Sub-directory containing go.mod (relative to repo root)'
    required: false
    default: ''
  timeout_minutes:
    description: 'Timeout for error retries in minutes'
    required: false
    default: '20'
  github_token:
    description: 'GitHub token for authentication (use secrets.GITHUB_TOKEN)'
    required: true

runs:
  using: composite
  steps:
    - name: Checkout PR code
      uses: actions/checkout@v4
      with:
        token: ${{ inputs.github_token }}
        ref: ${{ github.event.pull_request.head.ref }}
        fetch-depth: 0
        persist-credentials: true

    - name: Setup
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y jq

    - name: Detect module changes
      id: go_mod
      shell: bash
      run: |
        BASE_REF=${{ github.event.pull_request.base.ref }}
        git fetch origin "${BASE_REF}"
        if [[ -z "${{ inputs.directory }}" || "${{ inputs.directory }}" == "." ]]; then
          MODPATH='go.mod'
        else
          MODPATH="${{ inputs.directory }}/go.mod"
        fi
        if git diff --quiet "origin/${BASE_REF}...HEAD" -- "$MODPATH"; then
          echo "changed=false" >> "$GITHUB_OUTPUT"
        else
          echo "changed=true" >> "$GITHUB_OUTPUT"
        fi

    - name: Skip if no module changes
      if: steps.go_mod.outputs.changed == 'false'
      shell: bash
      run: |
        echo "‚úÖ no changes in go.mod; skipping PatchLens analysis"

    - name: Run PatchLens analysis
      if: steps.go_mod.outputs.changed == 'true'
      id: analysis
      shell: bash
      env:
        HOST: api.patchlens.com
        REPO: ${{ github.event.pull_request.head.repo.clone_url }}
        BRANCH: ${{ github.event.pull_request.base.ref }}
        DIR: ${{ inputs.directory }}
        GITHUB_TOKEN: ${{ inputs.github_token }}
      run: |
        set -euo pipefail

        # prepare path to go.mod
        if [[ -z "${DIR}" || "${DIR}" == "." ]]; then
          GO_MOD="go.mod"
        else
          GO_MOD="${DIR%/}/go.mod"
        fi
        # load and JSON-escape go.mod
        GOMOD_PAYLOAD=$(jq -Rs '.' < "${GO_MOD}")
        # build the request
        PAYLOAD=$(jq -n \
          --arg repo   "${REPO}" \
          --arg branch "${BRANCH}" \
          --arg dir    "${DIR}" \
          --argjson gomod "${GOMOD_PAYLOAD}" \
          '{repo: $repo, branch: $branch, directory: $dir, gomod: $gomod}')

        # submit with retry
        START=$(date +%s)
        TIMEOUT=$(( ${{ inputs.timeout_minutes }} * 60 ))
        until RES=$(curl -sS -X POST "https://${HOST}/analyze-github" \
                       -H "Authorization: Bearer ${GITHUB_TOKEN}" \
                       -H "Content-Type: application/json" \
                       -d "${PAYLOAD}"); do
          NOW=$(date +%s)
          if (( NOW - START >= TIMEOUT )); then
            echo "‚ùå Submission failed after ${TIMEOUT}s" >&2
            exit 1
          fi
          echo "‚ö†Ô∏è Submission failed, retrying in 30s‚Ä¶" >&2
          sleep 30
        done

        echo "‚úÖ Analysis started‚Ä¶"
        JOB_ID=$(echo "${RES}" | jq -r '.id')
        if [[ -z "${JOB_ID}" ]]; then
          echo "‚ùå Error submitting to PatchLens: $(echo "${RES}")"
          exit 1
        fi

        # poll loop
        while true; do
          STAT=$(curl -sS -X POST "https://${HOST}/status" \
            -H "Content-Type: application/json" \
            -d "{\"id\":\"${JOB_ID}\"}")
          CODE=$?
          if [[ "${CODE:-0}" -ne 0 ]]; then
            NOW=$(date +%s)
            if (( NOW - START >= TIMEOUT )); then
              echo "‚ùå Polling failed after ${TIMEOUT}s" >&2
              exit 1
            fi
            echo "‚ö†Ô∏è Status request failed, retry in 30s‚Ä¶" >&2
            sleep 30
            continue
          fi
          # save output for possible end comment
          echo "$STAT" > status.json
          # reset start so timeout only counts during failures
          START=$(date +%s)
          # print any new logs
          echo "${STAT}" | jq -r '.logs[]?' || true

          # check if service reports an error
          ERROR=$(echo "${STAT}" | jq -r '.error // empty')
          if [[ "${ERROR}" == "true" ]]; then
            echo "‚ùå Analysis failed: $(echo "${STAT}" | jq -r '.error_message // "Unknown error"')"
            # set outputs for error and unreachable count
            echo "analysis_error=true" >> "$GITHUB_OUTPUT"
            echo "reachable_changed_function_count=0" >> "$GITHUB_OUTPUT"
            exit 1
          fi

          QUEUED=$(echo "${STAT}" | jq -r '.queued')
          RUNNING=$(echo "${STAT}" | jq -r '.running')

          if [[ "${QUEUED}" == "true" ]]; then
            echo "‚è≥ queued‚Ä¶"
            sleep 10
            continue
          fi

          if [[ "${RUNNING}" == "false" ]]; then
            # parse end report reachable_changed_function_count
            COUNT=$(jq -r '.end_report.module.reachable_changed_function_count // 0' status.json)
            echo "üìä Final report:"
            echo "${STAT}" | jq '.end_report'
            echo "‚úÖ Done"
            # set output for reachable_changed_function_count
            echo "analysis_error=false" >> "$GITHUB_OUTPUT"
            echo "reachable_changed_function_count=${COUNT}" >> "$GITHUB_OUTPUT"
            break
          fi

          sleep 10
        done

    - name: Upload report image to patchlens-assets branch
      id: upload_report
      if: steps.go_mod.outputs.changed == 'true' &&
          steps.analysis.outputs.analysis_error == 'false' &&
          steps.analysis.outputs.reachable_changed_function_count != '0'
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
        ASSETS_BRANCH: patchlens-assets
        PR_NUMBER: ${{ github.event.pull_request.number }}
      run: |
        set -euo pipefail

        # prepare content
        B64=$(jq -r '.report_chart64 // .reportChart64' status.json)
        if [[ -z "$B64" ]]; then
          echo "‚ö†Ô∏è No chart data, skipping upload."
          echo "report_chart_url=" >> "$GITHUB_OUTPUT"
          echo "report_json_url=" >> "$GITHUB_OUTPUT"
          exit 0
        fi

        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git fetch origin "$ASSETS_BRANCH" || true

        # fetch or create orphaned assets branch
        if git rev-parse --verify "origin/$ASSETS_BRANCH" >/dev/null 2>&1; then
          git checkout -B "$ASSETS_BRANCH" "origin/$ASSETS_BRANCH"
        else
          git checkout --orphan "$ASSETS_BRANCH"
          git rm -rf .
          git commit --allow-empty -m "Initialize $ASSETS_BRANCH branch"
        fi

        mkdir -p reports/
        REPO_NAME="${GITHUB_REPOSITORY##*/}"
        BASE="reports/${REPO_NAME}-${PR_NUMBER}-$(date +%s)"
        PNG_FILE="${BASE}.png"
        JSON_FILE="${BASE}.json"
        echo "$B64" | base64 --decode > "$PNG_FILE"
        jq '.end_report' status.json > "$JSON_FILE"

        # add, commit, and push with retry on conflict
        git add "$PNG_FILE" "$JSON_FILE"
        git commit -m "PatchLens report for ${REPO_NAME} PR #${PR_NUMBER}"
        for i in {1..10}; do
          if git push origin "$ASSETS_BRANCH"; then
            break
          else
            echo "‚ö†Ô∏è Push conflict (attempt $i), fetching & rebasing‚Ä¶" >&2
            git pull --rebase origin "$ASSETS_BRANCH"
          fi
        done

        # export raw URLs for the next comment step
        echo "report_chart_url=https://raw.githubusercontent.com/${GITHUB_REPOSITORY}/${ASSETS_BRANCH}/${PNG_FILE}" >> "$GITHUB_OUTPUT"
        echo "report_json_url=https://raw.githubusercontent.com/${GITHUB_REPOSITORY}/${ASSETS_BRANCH}/${JSON_FILE}" >> "$GITHUB_OUTPUT"

    - name: Comment results on PR (not reachable)
      if: steps.go_mod.outputs.changed == 'true' &&
          steps.analysis.outputs.analysis_error == 'false' &&
          steps.analysis.outputs.reachable_changed_function_count == '0'
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github_token }}
        script: |
          // delete old PatchLens comments
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            per_page: 100
          });
          for (const c of comments) {
            if (c.user.login === 'github-actions[bot]' &&
                c.body.startsWith('## üîç PatchLens Analysis Report')) {
              await github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: c.id
              });
            }
          }

          // post simple ‚Äúnot reachable‚Äù message
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: [
              '## üîç PatchLens Analysis Report',
              '',
              'Module changes not reachable by project'
            ].join('\n')
          });

    - name: Comment results on PR (normal report)
      if: steps.go_mod.outputs.changed == 'true' &&
          steps.analysis.outputs.analysis_error == 'false' &&
          steps.analysis.outputs.reachable_changed_function_count != '0'
      uses: actions/github-script@v7
      env:
        REPORT_CHART_URL: ${{ steps.upload_report.outputs.report_chart_url }}
        REPORT_JSON_URL: ${{ steps.upload_report.outputs.report_json_url }}
      with:
        github-token: ${{ inputs.github_token }}
        script: |
          const chartUrl = process.env.REPORT_CHART_URL;
          const jsonUrl = process.env.REPORT_JSON_URL;
          if (!chartUrl) {
            core.info('‚ö†Ô∏è No report URL, skipping comment.');
            return;
          }

          // delete old PatchLens comments
          const { data: comments } = await github.rest.issues.listComments({
            owner:        context.repo.owner,
            repo:         context.repo.repo,
            issue_number: context.issue.number,
            per_page:     100
          });
          for (const c of comments) {
            if (c.user.login === 'github-actions[bot]' &&
                c.body.startsWith('## üîç PatchLens Analysis Report')) {
              await github.rest.issues.deleteComment({
                owner:      context.repo.owner,
                repo:       context.repo.repo,
                comment_id: c.id
              });
            }
          }

          // post the report image + JSON link
          await github.rest.issues.createComment({
            owner:        context.repo.owner,
            repo:         context.repo.repo,
            issue_number: context.issue.number,
            body: [
              '## üîç PatchLens Analysis Report',
              '',
              `![PatchLens Report](${chartUrl})`,
              '',
              `üìÑ [Download detailed JSON report](${jsonUrl})`,
              ''
            ].join('\n')
          });

